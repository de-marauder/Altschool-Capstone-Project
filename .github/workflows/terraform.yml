name: Terraform CI-CD, Docker Build and Push

on:
  push:
    branches:
    - main
    paths:
    - Infrastructure/**
    - App/**
    
permissions:
   contents: read
   pull-requests: write


    
env:
#TERRAFORM
  TF_CLOUD_ORGANIZATION: "group23"
  TF_API_TOKEN: ${{ secret.TF_API_TOKEN }}
  TF_WORKSPACE: "group23"
  TF_ACTION_WORKING_DIR: 'Infrastructure'
#AWS
  AWS_REGION: "eu-west-2"
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#NODEJS
  WORKING_DIRECTORY: 'App'
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)
  NODE_WORKING_DIR: 'App'
#GITHUB
  #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

################################
#                              #
#            NODE Js           #
#                              #
################################
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
      # https://github.com/actions/checkout
      - name: Checkout codebase
        uses: actions/checkout@v3.3.0


      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/docker/login-action
      - name: Login to DockerHub
        # Only login if not a PR, as PRs only trigger a Docker build and not a push
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      ###############################################
      # Build/Push the 'demarauder/zombrary' image
      ###############################################
      - name: Build, tag, and push image to Docker hub
        id: build-image
        run: |
          cd App
          docker image build \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/zombrary:latest \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/zombrary:${{ env.SHORT_SHA }} \
          .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/zombrary:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/zombrary:${{ env.SHORT_SHA }}


#############################################
#                                           #
#             TERRAFORM                     #
#                                           #
#############################################
   terraform-setup:
    name: Terraform CI-CD
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    #defaults:
     # run:
       # shell: bash
    
    
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        WORKING_DIRECTORY: 

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2.2.1
        with:
          #cli_config_credentials_token: ${{ env.TF_API_TOKEN }}
          terraform_version: 1.1.9
          terraform_wrapper: false
    
      - name: Install Terraform
        uses: little-core-labs/install-terraform@v2.0.0
        with:
          #cli_config_credentials_token: ${{ env.TF_API_TOKEN }}
          version: 0.13.4

      - name: Confirm Install
        run: terraform -v
      
#terraform init
      - name: Terraform Init
        id: init
        run: terraform init
        #uses: hashicorp/terraform-github-actions/init@v0.4.0
        env:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}
        shell: bash
          #run: terraform init -input=false

#initiate terraform to run          
      #- name: Create Plan Run
       # uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
       # id: plan-run
       # with:
        #  workspace: ${{ env.TF_WORKSPACE }}
        #  configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
        #  plan_only: true

#terraform plan         
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
       # uses: hashicorp/terraform-github-actions/plan@v0.14.0
        env:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}
          #run: terraform plan -input=false
        #with:
          #version: 0.13.4
        

#initiate terraform to apply          
   #   - name: 'Create Terraform Apply'
   #     uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
    #    id: apply-run
    #    with:
     #     workspace: ${{ env.TF_WORKSPACE }}
     #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
     
#terraform show
      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: .${{ env.TF_ACTION_WORKING_DIR }}
        env:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        shell: bash
      

#terraform apply          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
       # uses: hashicorp/terraform-github-actions/apply@v0.14.0
        env:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        working-directory: ${{ env.TF_ACTION_WORKING_DIR }}
        shell: bash
          #run: terraform apply -auto-approve -input=false 
       #with:
          #version: 0.13.4
          # auto_approve: true
          
          




# - name: Terraform Apply
#   run: |
#     terraform init
#     terraform plan
#     terraform apply -auto-approve
